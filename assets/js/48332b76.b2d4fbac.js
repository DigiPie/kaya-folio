"use strict";(self.webpackChunkevantay_com=self.webpackChunkevantay_com||[]).push([[2814],{5616:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>o,contentTitle:()=>c,default:()=>d,frontMatter:()=>s,metadata:()=>a,toc:()=>l});var t=i(4848),r=i(8453);const s={title:"Git Cheatsheet"},c=void 0,a={id:"git-cheatsheet",title:"Git Cheatsheet",description:"Published on December 24, 2020",source:"@site/docs/git-cheatsheet.md",sourceDirName:".",slug:"/git-cheatsheet",permalink:"/docs/git-cheatsheet",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{title:"Git Cheatsheet"},sidebar:"docs",previous:{title:"JS Cheatsheet",permalink:"/docs/js-cheatsheet"},next:{title:"Git Ignore file",permalink:"/docs/git-ignore-file"}},o={},l=[{value:"Get branch information",id:"get-branch-information",level:2},{value:"Delete local and remote branches",id:"delete-local-and-remote-branches",level:2},{value:"Reset a branch",id:"reset-a-branch",level:2},{value:"Ignore a file&#39;s changes temporarily",id:"ignore-a-files-changes-temporarily",level:2},{value:"Resources",id:"resources",level:2}];function h(e){const n={a:"a",admonition:"admonition",br:"br",code:"code",em:"em",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.p,{children:"Published on December 24, 2020"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsxs)(n.em,{children:["This document was migrated from ",(0,t.jsx)(n.a,{href:"https://digipie.github.io/digidocs/git/cheat-sheet/",children:"DigiDocs"})]})}),"\n",(0,t.jsx)(n.admonition,{type:"tip",children:(0,t.jsxs)(n.p,{children:["Basic knowledge of Git is assumed in this tutorial. If you are new to Git, visit ",(0,t.jsx)(n.a,{href:"http://rogerdudler.github.io/git-guide/",children:"http://rogerdudler.github.io/git-guide/"})," to learn the basics first."]})}),"\n",(0,t.jsx)(n.h2,{id:"get-branch-information",children:"Get branch information"}),"\n",(0,t.jsx)(n.p,{children:"I want to find out what branches I have locally:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"git branch\n"})}),"\n",(0,t.jsx)(n.p,{children:"I want to find out what is the upstream branch for a given branch:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"git branch -v\n"})}),"\n",(0,t.jsx)(n.p,{children:"Even more verbose information:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"git branch -vv\n"})}),"\n",(0,t.jsx)(n.h2,{id:"delete-local-and-remote-branches",children:"Delete local and remote branches"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Example scenario:"}),(0,t.jsx)(n.br,{}),"\n","I have merged my development branch ",(0,t.jsx)(n.code,{children:"feat/new-feature"})," into ",(0,t.jsx)(n.code,{children:"develop"})," and wish to delete the local and remote branch of ",(0,t.jsx)(n.code,{children:"feat/new-feature"})," now."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"The solution:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Delete the local branch:","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"git branch -d feat/new-feature"})}),"\n",(0,t.jsxs)(n.li,{children:["or with ",(0,t.jsx)(n.code,{children:"--force"}),": ",(0,t.jsx)(n.code,{children:"git branch -D feat/new-feature"})]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["Delete the remote branch: ",(0,t.jsx)(n.code,{children:"git push <remote> -d <branch>"})]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"The general command format it is based on:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Delete a local branch:","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"git branch -d|--delete <branch>"})}),"\n",(0,t.jsxs)(n.li,{children:["or with ",(0,t.jsx)(n.code,{children:"--force"}),": ",(0,t.jsx)(n.code,{children:"git branch -D <branch>"})]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["Delete a remote branch: ",(0,t.jsx)(n.code,{children:"git push <remote> -d|--delete <branch>"})]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"reset-a-branch",children:"Reset a branch"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Example scenario:"}),(0,t.jsx)(n.br,{}),"\n","I messed up my local ",(0,t.jsx)(n.code,{children:"master"})," branch. I want to reset it such that it will revert to being the same as ",(0,t.jsx)(n.code,{children:"origin/master"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"The one-line solution:"}),(0,t.jsx)(n.br,{}),"\n",(0,t.jsx)(n.code,{children:"git checkout -B master origin/master"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"The general command format it is based on:"}),(0,t.jsx)(n.br,{}),"\n",(0,t.jsx)(n.code,{children:"git checkout -b|-B <new_branch> [<start point>]"})]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"How does it work?"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"git checkout -b|-B <new_branch>"})," is typically used to create and switch to a new branch. However, if ",(0,t.jsx)(n.code,{children:"<new_branch>"})," already exists, it will be reset instead."]}),"\n",(0,t.jsx)(n.admonition,{title:"Cite",type:"note",children:(0,t.jsxs)(n.p,{children:["If ",(0,t.jsx)(n.code,{children:"-B"})," is given, ",(0,t.jsx)(n.code,{children:"<new_branch>"})," is created if it doesn\u2019t exist; otherwise, it is reset."]})}),"\n",(0,t.jsx)(n.h2,{id:"ignore-a-files-changes-temporarily",children:"Ignore a file's changes temporarily"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Example scenario:"}),(0,t.jsx)(n.br,{}),"\n","I want to stop tracking changes for a given file temporarily, as I am still editing it and do not want an incomplete copy of it to be added to staging when I do ",(0,t.jsx)(n.code,{children:"git add *"})," (to add all changes in the current path)."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"The solution:"})}),"\n",(0,t.jsx)(n.p,{children:"To temporarily ignore (stop tracking) a file:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"git update-index --assume-unchanged <file>\n"})}),"\n",(0,t.jsx)(n.p,{children:"To start tracking a file again:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"git update-index --no-assume-unchanged <file>\n"})}),"\n",(0,t.jsxs)(n.p,{children:["See ",(0,t.jsx)(n.a,{href:"git-ignore-file#using-git-update-index",children:"Git Ignore file"})," for more information."]}),"\n",(0,t.jsx)(n.h2,{id:"resources",children:"Resources"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://digipie.github.io/digidocs/git/cheat-sheet/",children:"Original copy of this document at DigiDocs"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://git-scm.com/docs/git-branch",children:"gitscm's documentation for branch"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://git-scm.com/docs/git-checkout",children:"gitscm's documentation for checkout"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://git-scm.com/docs/git-push",children:"gitscm's documentation for push"})}),"\n"]})]})}function d(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(h,{...e})}):h(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>c,x:()=>a});var t=i(6540);const r={},s=t.createContext(r);function c(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:c(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);