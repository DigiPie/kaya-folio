"use strict";(self.webpackChunkevantay_com=self.webpackChunkevantay_com||[]).push([[7340],{8997:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>c,default:()=>l,frontMatter:()=>r,metadata:()=>i,toc:()=>a});var s=n(4848),d=n(8453);const r={title:"JS Cheatsheet"},c=void 0,i={id:"js-cheatsheet",title:"JS Cheatsheet",description:"Published on August 1, 2021",source:"@site/docs/js-cheatsheet.md",sourceDirName:".",slug:"/js-cheatsheet",permalink:"/docs/js-cheatsheet",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{title:"JS Cheatsheet"},sidebar:"docs",previous:{title:"C Cheatsheet",permalink:"/docs/c-cheatsheet"},next:{title:"Git Cheatsheet",permalink:"/docs/git-cheatsheet"}},o={},a=[{value:"Var, Let and Const",id:"var-let-and-const",level:2},{value:"Resources",id:"resources",level:2}];function h(e){const t={a:"a",admonition:"admonition",code:"code",h2:"h2",li:"li",p:"p",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,d.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.p,{children:"Published on August 1, 2021"}),"\n",(0,s.jsx)(t.h2,{id:"var-let-and-const",children:"Var, Let and Const"}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.a,{href:"https://www.w3schools.com/Js/js_es6.asp",children:"Javascript ES6"})," introduced two new keywords to define variables, ",(0,s.jsx)(t.code,{children:"let"})," and ",(0,s.jsx)(t.code,{children:"const"}),". Previously, the keyword ",(0,s.jsx)(t.code,{children:"var"})," was the only way to do so. ",(0,s.jsx)(t.code,{children:"let"})," and ",(0,s.jsx)(t.code,{children:"const"})," were introduced because there were issues with ",(0,s.jsx)(t.code,{children:"var"})," which made it error-prone and hard to debug."]}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{}),(0,s.jsx)(t.th,{children:(0,s.jsx)(t.code,{children:"var"})}),(0,s.jsx)(t.th,{children:(0,s.jsx)(t.code,{children:"let"})}),(0,s.jsx)(t.th,{children:(0,s.jsx)(t.code,{children:"const"})})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Scope"}),(0,s.jsx)(t.td,{children:"Global or Function"}),(0,s.jsxs)(t.td,{children:["Block scope ",(0,s.jsx)(t.code,{children:"{}"})]}),(0,s.jsxs)(t.td,{children:["Block scope ",(0,s.jsx)(t.code,{children:"{}"})]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Must be initialized when declared"}),(0,s.jsx)(t.td,{children:"No"}),(0,s.jsx)(t.td,{children:"No"}),(0,s.jsx)(t.td,{children:"Yes"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Can use before initialization"}),(0,s.jsx)(t.td,{children:"Yes"}),(0,s.jsx)(t.td,{children:"No"}),(0,s.jsx)(t.td,{children:"No"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Can be redeclared"}),(0,s.jsx)(t.td,{children:"Yes"}),(0,s.jsx)(t.td,{children:"No"}),(0,s.jsx)(t.td,{children:"No"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Can be updated"}),(0,s.jsx)(t.td,{children:"Yes"}),(0,s.jsx)(t.td,{children:"Yes"}),(0,s.jsx)(t.td,{children:"No"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Hoisted to start of scope"}),(0,s.jsx)(t.td,{children:"Yes"}),(0,s.jsx)(t.td,{children:"Yes"}),(0,s.jsx)(t.td,{children:"Yes"})]})]})]}),"\n",(0,s.jsxs)(t.p,{children:["Avoid using ",(0,s.jsx)(t.code,{children:"var"})," because it is either global or function scope, and a declaration and assignment of a ",(0,s.jsx)(t.code,{children:"var"})," can easily be redeclared or updated unknowingly in another function. Furthermore, a ",(0,s.jsx)(t.code,{children:"var"})," is initialized with ",(0,s.jsx)(t.code,{children:"undefined"})," and can be used even before being assigned a value."]}),"\n",(0,s.jsxs)(t.p,{children:["On the other hand, ",(0,s.jsx)(t.code,{children:"let"})," and ",(0,s.jsx)(t.code,{children:"const"})," are block scope, and cannot be redeclared. Additionally, ",(0,s.jsx)(t.code,{children:"const"})," cannot be updated. Both ",(0,s.jsx)(t.code,{children:"let"})," and ",(0,s.jsx)(t.code,{children:"const"})," also cannot be used before initialization, and will throw ",(0,s.jsx)(t.code,{children:"Reference error"})," rather than return ",(0,s.jsx)(t.code,{children:"undefined"})," like ",(0,s.jsx)(t.code,{children:"var"}),"."]}),"\n",(0,s.jsx)(t.admonition,{title:"Quote",type:"note",children:(0,s.jsxs)(t.p,{children:['"Hoisting is a JavaScript mechanism where variables and function declarations are moved to the top of their scope before code execution." - Sarah Chima Atuonwu, ',(0,s.jsx)(t.a,{href:"https://www.freecodecamp.org/news/var-let-and-const-whats-the-difference/",children:"Var, Let, and Const \u2013 What's the Difference?"})]})}),"\n",(0,s.jsx)(t.h2,{id:"resources",children:"Resources"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.a,{href:"https://www.freecodecamp.org/news/var-let-and-const-whats-the-difference/",children:"Var, Let, and Const \u2013 What's the Difference?"})}),"\n"]})]})}function l(e={}){const{wrapper:t}={...(0,d.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>c,x:()=>i});var s=n(6540);const d={},r=s.createContext(d);function c(e){const t=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(d):e.components||d:c(e.components),s.createElement(r.Provider,{value:t},e.children)}}}]);